(ns paneer.engine
  (:require [clojure.string :as str]))

(defn- delimit
  [string]
  (when string (str "\"" (str/join (str/split (name string) #"\"")) "\"")))

(defn- convert-column-option
  [opt]
  (if (string? opt)
    opt
    (-> (name opt)
        (str/replace "-" " ")
        str/upper-case)))

(defn- column-from-def
  [{:keys [type col-name options] :as col}]
  (if (string? col) 
    col
    (let [options (str/join " " (map convert-column-option options))]
      (str/trimr (str (delimit col-name) " " type " " options)))))

(defn- columns-from-defs
  [columns]
  (str/join ", " columns)) 

(defn- group-alters
  [{:keys [columns] :as command}]
  (let [base-cmd (dissoc command :columns)]
    (map #(assoc base-cmd :columns (vector %)) columns)))

(defn- delimit-fields
  [query-handler & fields]
  (fn [command]
    (let [command (reduce (fn [cmd field] (update-in cmd (vector field) delimit)) 
                          command
                          fields)]
      (query-handler command))))

(defn- convert-columns
  [query-handler]
  (fn [command]
    (if (:columns command)
      (query-handler (update-in command [:columns] #(map column-from-def %)))
      (query-handler command))))

(defn- qualify-table-name
  [query-handler]
  (fn [{:keys [schema] :as cmd}]
    (if schema
      (query-handler (update-in cmd [:table] #(str schema "." %)))
      (query-handler cmd))))

(defmulti make-query 
  "Accepts a map generated by the functions in paneer.core in the form
    :command - :create, :alter-rename, :alter-create-column, :alter-drop-column, 
    :alter-rename-column or :drop specifies the type of actions on the table
    :if-exists - true of false if the action is the if-exists (or if-not-exists 
      in the case of create) version. If-exists is used in an alter command, it
      will be applied lower in the command as well. (e.g. ALTER TABLE IF EXISTS
      ...DROP COLUMN IF EXISTS ...;)
    :table - string name of the table to take action on
    :schema - name of schema (or database for MySQL) to create the table within
    :new-table - string name of table on :alter-rename
    :columns - Vector of definitions of the columns that will be acted upon. For
      create actions and alter/create actions columns will be maps of the column 
      defintion. For alter rename or alter constrain actions columns are just 
      the string name of the column."
  :command)

(defmethod make-query :create-schema
  [{:keys [schema]}]
  (str "CREATE SCHEMA " schema ";"))

(defmethod make-query :transaction
  [{:keys [commands]}]
  (apply vector "BEGIN;" (conj (mapv eval-query commands) "COMMIT;")))

(defmethod make-query :create-table
  [{:keys [if-exists table columns]}]
  (str "CREATE TABLE " (when if-exists "IF NOT EXISTS ") 
       table " (" (columns-from-defs columns) ");"))

(defmethod make-query :alter-rename
  [{:keys [if-exists table new-table schema]}]
  (str "ALTER TABLE " (when if-exists "IF EXISTS ") 
       table " RENAME TO \"" new-table "\";"))

(defmethod make-query :alter-create-column
  [{:keys [if-exists table columns] :as cmd}]
  (if (= 1 (count columns))
    (str "ALTER TABLE " (when if-exists "IF EXISTS ")
         table " ADD COLUMN " 
         (first columns) ";")
    (make-query {:command :transaction :commands (group-alters cmd)})))

(defmethod make-query :alter-drop-column
  [{:keys [if-exists table columns] :as cmd}]
  (if (= 1 (count columns)) 
    (str "ALTER TABLE " (when if-exists "IF EXISTS ")
         table " DROP COLUMN "
         (when if-exists "IF EXISTS ") 
         (first columns) ";")
    (make-query ({:command :transaction :commands (group-alters cmd)}))))

(defmethod make-query :alter-rename-column
  [{:keys [if-exists table columns]}]
  (let [[old-name new-name] columns]
    (str "ALTER TABLE " (when if-exists "IF EXISTS ")
         table " RENAME COLUMN "
         old-name " TO " new-name ";")))

(defmethod make-query :drop-table
  [{:keys [if-exists table]}]
  (str "DROP TABLE " (when if-exists "IF EXISTS ")
       table ";"))

(def eval-query
  (-> make-query
      convert-columns
      qualify-table-name
      (delimit-fields :table :schema)))